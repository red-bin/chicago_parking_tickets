{"name":"red-bin.GitHub.io","tagline":"Data, civics and bad data","body":"# chappylol.github.io\r\n\r\n```python\r\nimport pandas as pd\r\nimport usaddress\r\nimport difflib\r\nfrom usaddress import parse\r\n\r\nimport psycopg2\r\nimport geopandas as gp\r\nimport re\r\nfrom geopandas import GeoDataFrame,GeoSeries\r\n\r\n%matplotlib notebook\r\nimport matplotlib.pyplot as plt\r\nfrom IPython.display import display\r\nimport numpy as np\r\n\r\n%matplotlib inline\r\n%load_ext cythonmagic\r\n```\r\n\r\n    /usr/lib/python2.7/site-packages/IPython/extensions/cythonmagic.py:21: UserWarning: The Cython magic has been moved to the Cython package\r\n      warnings.warn(\"\"\"The Cython magic has been moved to the Cython package\"\"\")\r\n\r\n\r\n\r\n```python\r\ndef parse_addr(addr):\r\n    parsed = usaddress.parse(addr)\r\n    addr_dict = dict([ (key, val) for val, key in parsed ])\r\n    \r\n    streetname = addr_dict['StreetName']\r\n    if 'StreetNamePreDirectional' in addr_dict:\r\n        streetdir = addr_dict['StreetNamePreDirectional']\r\n    else:\r\n        streetdir = ''\r\n        addr_dict['StreetNamePreDirectional'] = ''\r\n        \r\n    if streetname not in unique_mapstreets:\r\n        fixed_street = correct_street(streetname, streetdir)\r\n        if fixed_street:\r\n            addr_dict['StreetName'] = fixed_street\r\n        if not fixed_street:\r\n            return None\r\n    \r\n    ret_addr = pd.Series(addr_dict)\r\n    \r\n    return ret_addr\r\n```\r\n\r\n\r\n```python\r\ndef get_closest(streetname, streetdir):\r\n\r\n    street_str = \"%s\" % streetname\r\n    match = difflib.get_close_matches(str(street_str), unique_mapstreets, cutoff=.8, n=1)\r\n    if match:\r\n        return match[0]\r\n    \r\n    if re.match('^[0-9]+',street_str):\r\n        match = difflib.get_close_matches(str(streetname), unique_mapstreets, cutoff=.6, n=1)\r\n        if match:\r\n            return match[0]\r\n        \r\n    print \"[WARN] Could not find %s\" % streetname\r\n    \r\ndef correct_street(streetname, streetdir):\r\n\r\n    \r\n    correct_street = get_closest(streetname, streetdir)\r\n    if correct_street:\r\n        return correct_street\r\n```\r\n\r\n\r\n```python\r\nsql = \"\"\"SELECT gid,pre_dir,street_nam,street_typ, l_f_add as f_add, l_t_add as t_add, geom from transportation where street_nam is not NULL\r\nunion\r\nSELECT gid,pre_dir,street_nam,street_typ, r_f_add as f_add, r_t_add as t_add, geom as geom from transportation where street_nam is not NULL\r\n\"\"\"\r\n\r\nconnection = psycopg2.connect(database='postgres', user='postgres')\r\nmapdata = GeoDataFrame.from_postgis(sql, connection)\r\n\r\n```\r\n\r\n\r\n```python\r\ntemp_mapgroups_wdir = mapdata.groupby(['pre_dir', 'street_nam'])\r\ntemp_mapgroups = mapdata.groupby(['street_nam'])\r\n\r\nunique_mapstreets = [ dirstreet for dirstreet in temp_mapgroups.groups.keys() ]\r\nunique_mapstreets_wdir = [ street for street in temp_mapgroups_wdir.groups.keys() ]\r\n```\r\n\r\n\r\n```python\r\ntickets = pd.read_csv(\"/opt/ramdisk/randomtickets.csv\") \r\naddresses = tickets['address']\r\n\r\npd_addr = []\r\nfor addr in addresses:\r\n    parsed = parse_addr(addr)\r\n    if type(parsed) != type(None):\r\n        pd_addr.append(parsed)\r\n\r\npd_addr = pd.DataFrame(pd_addr)\r\n```\r\n\r\n    [WARN] Could not find L\r\n    [WARN] Could not find ISLAND\r\n    [WARN] Could not find EUROPE\r\n    [WARN] Could not find PLAISANCE\r\n    [WARN] Could not find F\r\n    [WARN] Could not find KING\r\n    [WARN] Could not find SOUTH\r\n    [WARN] Could not find S\r\n    [WARN] Could not find MAWR\r\n    [WARN] Could not find F\r\n    [WARN] Could not find LOT\r\n    [WARN] Could not find PK\r\n    [WARN] Could not find PAUL\r\n    [WARN] Could not find KING\r\n    [WARN] Could not find PARKING\r\n    [WARN] Could not find ISLAND\r\n    [WARN] Could not find PARKING\r\n\r\n\r\n\r\n```python\r\naddr_streetgroups = pd_addr.groupby(['StreetName', 'StreetNamePreDirectional'], sort=True)\r\n```\r\n\r\n\r\n```python\r\nmap_streetgroups = mapdata.groupby(['street_nam', 'pre_dir'], sort=True)\r\n```\r\n\r\n\r\n```python\r\naddr_set = addr_streetgroups.groups.keys()\r\nmap_set = map_streetgroups.groups.keys()\r\n```\r\n\r\n\r\n```python\r\ndef get_map_tkt_pair(street, direction):\r\n    try:\r\n        tkt_group = addr_streetgroups.get_group((street, direction))\r\n        map_group = map_streetgroups.get_group((street, direction))\r\n        return [ map_group, tkt_group ]\r\n    except:\r\n        return [None, None]\r\n    \r\n\r\n```\r\n\r\n\r\n```python\r\ndef get_mapdata(mapdata, tktdata):\r\n    ret = []\r\n\r\n    for tkt in tktdata.AddressNumber:\r\n        geometry = None\r\n        for addr_range, group in mapdata.groupby(['f_add', 't_add']):\r\n            start, end = addr_range\r\n            if int(tkt) in range(int(start), int(end)):\r\n                geometry = group.geometry.values[0]\r\n                ret.append(geometry)\r\n\r\n                    \r\n    if ret:\r\n        return ret\r\n    else:\r\n        return None\r\n```\r\n\r\n\r\n```python\r\npairs = [ get_map_tkt_pair(street, direction) for street, direction in addr_set ]\r\n\r\nplotyay = []\r\n\r\nfor mapdata,tktdata in pairs:\r\n    if mapdata is None or tktdata is None:\r\n        continue\r\n    else:\r\n        #TODO: PUT MORE INFO IN GRAPH LATER\r\n        street_ticket_geos = get_mapdata(mapdata,tktdata)\r\n        if street_ticket_geos is not None:\r\n            plotyay.append(street_ticket_geos)       \r\n```\r\n\r\n\r\n```python\r\ntest =[ a[0] for a in [ b.values for b in plotyay ] ]\r\na = GeoDataFrame()\r\na['geometry'] = test\r\n```\r\n\r\n\r\n```python\r\na.plot()\r\n```\r\n\r\n\r\n\r\n\r\n    <matplotlib.axes._subplots.AxesSubplot at 0x7fbf6c36b690>\r\n\r\n\r\n\r\n\r\n![png](output_13_1.png)\r\n\r\n\r\n\r\n```python\r\n\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}